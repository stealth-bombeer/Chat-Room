{"ast":null,"code":"// import React, { useEffect, useState } from \"react\";\n// import ScrollToBottom from 'react-scroll-to-bottom'\n// import './App.css';\n// const Chat = ({ socket, username, room }) => {\n//     const [currentMessage, setCurrentMessage] = useState('');\n//     const [messageList, setmessageList] = useState([]);\n//     const sendMessage = async () => {\n//         if (currentMessage) {\n//             const messageData = {\n//                 //this message data contain what all infos we need to display with the message sent \n//                 room: room,\n//                 author: username,\n//                 message: currentMessage,\n//                 time: new Date(Date.now()).getHours() + \":\" + new Date(Date.now()).getMinutes(),\n\n//             };\n//             await socket.emit(\"send_message\", messageData)\n//             setmessageList((list) => [...list, messageData]);\n//             setCurrentMessage(\"\");\n//         }\n//     };\n//     //listen every time there is a change in socket \n//     useEffect(() => {\n//         socket.on(\"receive_message\", (data) => {\n//             // console.log(data);\n//             setmessageList((list) => [...list, data])\n//         });\n\n//     }, [socket]);\n//     return (\n//         <div className=\"chat-window\">\n//             <div>\n//                 <div className=\"chat-header\">\n//                     <p>Live Chat</p>\n//                 </div>\n//                 <div className=\"chat-body\">\n//                     <ScrollToBottom>\n//                     {messageList.map((messageContent) => {\n//                     return (\n//                         <div className=\"message\" id={username=== messageContent.author?\"other\":\"you\"}>\n//                             <div>\n//                                 <p>{messageContent.message}</p>\n//                             </div>\n//                             <div>\n//                                 <p id=\"time\">{messageContent.time}</p>\n//                                 <p id=\"author\">{messageContent.author}</p>\n//                             </div>\n//                         </div>\n//                     );\n\n//                     })}\n//                     </ScrollToBottom>\n\n//                 </div>\n//                 <div className=\"chat-footer\">\n//                     <input type=\"text\" value={currentMessage}placeholder=\"Hey...\" onChange={(event) => {\n//                         setCurrentMessage(event.target.value);\n//                     }} \n//                     onKeyPress={(event)=>{event.key===\"Enter\"&& sendMessage();}}/>\n//                     <button onClick={sendMessage}>&#9658;</button>\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default Chat;","map":{"version":3,"names":[],"sources":["C:/Users/G15-5515/OneDrive/Pictures/Socket-io/client/src/Chat.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import ScrollToBottom from 'react-scroll-to-bottom'\r\n// import './App.css';\r\n// const Chat = ({ socket, username, room }) => {\r\n//     const [currentMessage, setCurrentMessage] = useState('');\r\n//     const [messageList, setmessageList] = useState([]);\r\n//     const sendMessage = async () => {\r\n//         if (currentMessage) {\r\n//             const messageData = {\r\n//                 //this message data contain what all infos we need to display with the message sent \r\n//                 room: room,\r\n//                 author: username,\r\n//                 message: currentMessage,\r\n//                 time: new Date(Date.now()).getHours() + \":\" + new Date(Date.now()).getMinutes(),\r\n\r\n//             };\r\n//             await socket.emit(\"send_message\", messageData)\r\n//             setmessageList((list) => [...list, messageData]);\r\n//             setCurrentMessage(\"\");\r\n//         }\r\n//     };\r\n//     //listen every time there is a change in socket \r\n//     useEffect(() => {\r\n//         socket.on(\"receive_message\", (data) => {\r\n//             // console.log(data);\r\n//             setmessageList((list) => [...list, data])\r\n//         });\r\n\r\n//     }, [socket]);\r\n//     return (\r\n//         <div className=\"chat-window\">\r\n//             <div>\r\n//                 <div className=\"chat-header\">\r\n//                     <p>Live Chat</p>\r\n//                 </div>\r\n//                 <div className=\"chat-body\">\r\n//                     <ScrollToBottom>\r\n//                     {messageList.map((messageContent) => {\r\n//                     return (\r\n//                         <div className=\"message\" id={username=== messageContent.author?\"other\":\"you\"}>\r\n//                             <div>\r\n//                                 <p>{messageContent.message}</p>\r\n//                             </div>\r\n//                             <div>\r\n//                                 <p id=\"time\">{messageContent.time}</p>\r\n//                                 <p id=\"author\">{messageContent.author}</p>\r\n//                             </div>\r\n//                         </div>\r\n//                     );\r\n                    \r\n//                     })}\r\n//                     </ScrollToBottom>\r\n\r\n//                 </div>\r\n//                 <div className=\"chat-footer\">\r\n//                     <input type=\"text\" value={currentMessage}placeholder=\"Hey...\" onChange={(event) => {\r\n//                         setCurrentMessage(event.target.value);\r\n//                     }} \r\n//                     onKeyPress={(event)=>{event.key===\"Enter\"&& sendMessage();}}/>\r\n//                     <button onClick={sendMessage}>&#9658;</button>\r\n//                 </div>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default Chat;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"\n// import './App.css';\n// import io from 'socket.io-client'\n// import { useState } from 'react'\n// import Chat from './Chat';\n// //we're connecting our frontend with socket.io (where our backend server where it is runing)\n// const socket = io.connect('http://localhost:3001')\n\n// function App() {\n//   const [username, setUsername] = useState('');\n//   const [room, setRoom] = useState('');\n//   const [showChat, setShowChat] = useState('');\n\n//   const joinRoom = () => { \n//     //we allow to join room without username and room \n//     if (username && room) {\n//       // EventEmitter, which means you can emit events on one side and register listeners on the other:\n//       setShowChat(true);\n//       socket.emit(\"join_room\", room)\n\n//     }\n//   }\n//   return (\n//     <div className=\"App\">\n//       { !showChat ? (\n//       <div className=\"joinChatContainer\">\n//       <h3>Join A Chat</h3>\n//       {/* input for name  */}\n//       <input type=\"text\" placeholder=\"John...\" onChange={(event) => {\n//         setUsername(event.target.value);\n//       } }></input>\n//       {/* input for room  we want to have chat with peeps in same room  */}\n//       <input type=\"text\" placeholder=\"Room-id\" onChange={(event) => {\n//         setRoom(event.target.value);\n//       } }></input>\n//       <button onClick={joinRoom}>Join A Room</button>\n//       </div>\n//       )\n//       :(\n//         <Chat socket={socket} username={username} room={room} />\n//       )}\n//     </div>\n\n//   )\n// }\n\n// export default App;","map":{"version":3,"names":[],"sources":["C:/Users/G15-5515/OneDrive/Pictures/Socket-io/client/src/App.js"],"sourcesContent":["\n// import './App.css';\n// import io from 'socket.io-client'\n// import { useState } from 'react'\n// import Chat from './Chat';\n// //we're connecting our frontend with socket.io (where our backend server where it is runing)\n// const socket = io.connect('http://localhost:3001')\n\n// function App() {\n//   const [username, setUsername] = useState('');\n//   const [room, setRoom] = useState('');\n//   const [showChat, setShowChat] = useState('');\n\n//   const joinRoom = () => { \n//     //we allow to join room without username and room \n//     if (username && room) {\n//       // EventEmitter, which means you can emit events on one side and register listeners on the other:\n//       setShowChat(true);\n//       socket.emit(\"join_room\", room)\n      \n//     }\n//   }\n//   return (\n//     <div className=\"App\">\n//       { !showChat ? (\n//       <div className=\"joinChatContainer\">\n//       <h3>Join A Chat</h3>\n//       {/* input for name  */}\n//       <input type=\"text\" placeholder=\"John...\" onChange={(event) => {\n//         setUsername(event.target.value);\n//       } }></input>\n//       {/* input for room  we want to have chat with peeps in same room  */}\n//       <input type=\"text\" placeholder=\"Room-id\" onChange={(event) => {\n//         setRoom(event.target.value);\n//       } }></input>\n//       <button onClick={joinRoom}>Join A Room</button>\n//       </div>\n//       )\n//       :(\n//         <Chat socket={socket} username={username} room={room} />\n//       )}\n//     </div>\n   \n//   )\n// }\n\n// export default App;\n"],"mappings":";AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
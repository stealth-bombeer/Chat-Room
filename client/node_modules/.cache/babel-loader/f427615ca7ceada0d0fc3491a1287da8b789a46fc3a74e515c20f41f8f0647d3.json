{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\G15-5515\\\\OneDrive\\\\Pictures\\\\Socket-io\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport io from 'socket.io-client';\nimport { useState } from 'react';\n//we're connecting our frontend with socket.io (where our backend server where it is runing)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io.connect('http://localhost:3001');\nfunction App() {\n  _s();\n  const [username, setUsername] = useState('');\n  const [room, setRoom] = useState('');\n  const joinRoom = () => {\n    //we allow to join room without username and room \n    if (username && room) {\n      // EventEmitter, which means you can emit events on one side and register listeners on the other:\n      socket.emit(\"join_room\", room);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Join A Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"John...\",\n      onChange: event => {\n        setUsername(event.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Room-id\",\n      onChange: event => {\n        setRoom(event.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: joinRoom,\n      children: \"Join A Room\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chat, {\n      socket: socket,\n      username: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"5YeinykN5uUsuHJg7dEPXH2qfJI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["io","useState","socket","connect","App","username","setUsername","room","setRoom","joinRoom","emit","event","target","value"],"sources":["C:/Users/G15-5515/OneDrive/Pictures/Socket-io/client/src/App.js"],"sourcesContent":["\nimport './App.css';\nimport io from 'socket.io-client'\nimport { useState } from 'react'\n//we're connecting our frontend with socket.io (where our backend server where it is runing)\nconst socket = io.connect('http://localhost:3001')\n\nfunction App() {\n  const [username, setUsername] = useState('');\n  const [room, setRoom] = useState('');\n\n  const joinRoom = () => { \n    //we allow to join room without username and room \n    if (username && room) {\n      // EventEmitter, which means you can emit events on one side and register listeners on the other:\n      socket.emit(\"join_room\", room)\n    }\n  }\n  return (\n    <div className=\"App\">\n      <h3>Join A Chat</h3>\n      {/* input for name  */}\n      <input type=\"text\" placeholder=\"John...\" onChange={(event) => {\n        setUsername(event.target.value);\n      } }></input>\n      {/* input for room  we want to have chat with peeps in same room  */}\n      <input type=\"text\" placeholder=\"Room-id\" onChange={(event) => {\n        setRoom(event.target.value);\n      } }></input>\n      <button onClick={joinRoom}>Join A Room</button>\n  <Chat socket={socket} username />\n    </div>\n   \n  )\n}\n\nexport default App;\n"],"mappings":";;AACA,OAAO,WAAW;AAClB,OAAOA,EAAE,MAAM,kBAAkB;AACjC,SAASC,QAAQ,QAAQ,OAAO;AAChC;AAAA;AACA,MAAMC,MAAM,GAAGF,EAAE,CAACG,OAAO,CAAC,uBAAuB,CAAC;AAElD,SAASC,GAAG,GAAG;EAAA;EACb,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACM,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAEpC,MAAMQ,QAAQ,GAAG,MAAM;IACrB;IACA,IAAIJ,QAAQ,IAAIE,IAAI,EAAE;MACpB;MACAL,MAAM,CAACQ,IAAI,CAAC,WAAW,EAAEH,IAAI,CAAC;IAChC;EACF,CAAC;EACD,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,wBAClB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAoB,eAEpB;MAAO,IAAI,EAAC,MAAM;MAAC,WAAW,EAAC,SAAS;MAAC,QAAQ,EAAGI,KAAK,IAAK;QAC5DL,WAAW,CAACK,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;MACjC;IAAG;MAAA;MAAA;MAAA;IAAA,QAAS,eAEZ;MAAO,IAAI,EAAC,MAAM;MAAC,WAAW,EAAC,SAAS;MAAC,QAAQ,EAAGF,KAAK,IAAK;QAC5DH,OAAO,CAACG,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;MAC7B;IAAG;MAAA;MAAA;MAAA;IAAA,QAAS,eACZ;MAAQ,OAAO,EAAEJ,QAAS;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAqB,eACnD,QAAC,IAAI;MAAC,MAAM,EAAEP,MAAO;MAAC,QAAQ;IAAA;MAAA;MAAA;MAAA;IAAA,QAAG;EAAA;IAAA;IAAA;IAAA;EAAA,QACzB;AAGV;AAAC,GA3BQE,GAAG;AAAA,KAAHA,GAAG;AA6BZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
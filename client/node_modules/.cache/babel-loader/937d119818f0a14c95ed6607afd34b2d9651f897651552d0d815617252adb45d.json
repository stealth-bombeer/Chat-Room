{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\G15-5515\\\\OneDrive\\\\Pictures\\\\Socket-io\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport io from 'socket.io-client';\nimport { useState } from 'react';\nimport Chat from './Chat';\n//we're connecting our frontend with socket.io (where our backend server where it is runing)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet socket;\nfunction App() {\n  _s();\n  const [username, setUsername] = useState('');\n  const [room, setRoom] = useState('');\n  const [showChat, setShowChat] = useState(false);\n  const joinRoom = () => {\n    //we allow to join room without username and room \n    if (username && room) {\n      // EventEmitter, which means you can emit events on one side and register listeners on the other:\n\n      socket.emit(\"join_room\", room);\n      setShowChat(true);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: !showChat ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"joinChatContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Join A Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"John...\",\n        onChange: event => {\n          setUsername(event.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Room-id\",\n        onChange: event => {\n          setRoom(event.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: joinRoom,\n        children: \"Join A Room\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Chat, {\n      socket: socket,\n      username: username,\n      room: room\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"7YYpiOWNtBAlwis31kizQ/d4ONg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["io","useState","Chat","socket","App","username","setUsername","room","setRoom","showChat","setShowChat","joinRoom","emit","event","target","value"],"sources":["C:/Users/G15-5515/OneDrive/Pictures/Socket-io/client/src/App.js"],"sourcesContent":["\nimport './App.css';\nimport io from 'socket.io-client'\nimport { useState } from 'react'\nimport Chat from './Chat';\n//we're connecting our frontend with socket.io (where our backend server where it is runing)\nlet socket \n\nfunction App() {\n  const [username, setUsername] = useState('');\n  const [room, setRoom] = useState('');\n  const [showChat, setShowChat] = useState(false);\n\n  const joinRoom = () => {\n    //we allow to join room without username and room \n    if (username && room) {\n      // EventEmitter, which means you can emit events on one side and register listeners on the other:\n      \n      socket.emit(\"join_room\", room);\n      setShowChat(true);\n\n    }\n  };\n  return (\n    <div className=\"App\">\n      {!showChat ? (\n        <div className=\"joinChatContainer\">\n          <h3>Join A Chat</h3>\n          {/* input for name  */}\n          <input type=\"text\" placeholder=\"John...\" onChange={(event) => {\n            setUsername(event.target.value);\n          }}\n          />\n          {/* input for room  we want to have chat with peeps in same room  */}\n          <input type=\"text\" placeholder=\"Room-id\" onChange={(event) => {\n            setRoom(event.target.value);\n          }}/>\n          <button onClick={joinRoom}>Join A Room</button>\n        </div>\n       ) : (\n          <Chat socket={socket} username={username} room={room} />\n       )}\n        \n    </div>\n\n  );\n}\n\nexport default App;\n\n"],"mappings":";;AACA,OAAO,WAAW;AAClB,OAAOA,EAAE,MAAM,kBAAkB;AACjC,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,IAAI,MAAM,QAAQ;AACzB;AAAA;AACA,IAAIC,MAAM;AAEV,SAASC,GAAG,GAAG;EAAA;EACb,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACM,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAE/C,MAAMU,QAAQ,GAAG,MAAM;IACrB;IACA,IAAIN,QAAQ,IAAIE,IAAI,EAAE;MACpB;;MAEAJ,MAAM,CAACS,IAAI,CAAC,WAAW,EAAEL,IAAI,CAAC;MAC9BG,WAAW,CAAC,IAAI,CAAC;IAEnB;EACF,CAAC;EACD,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,UACjB,CAACD,QAAQ,gBACR;MAAK,SAAS,EAAC,mBAAmB;MAAA,wBAChC;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAoB,eAEpB;QAAO,IAAI,EAAC,MAAM;QAAC,WAAW,EAAC,SAAS;QAAC,QAAQ,EAAGI,KAAK,IAAK;UAC5DP,WAAW,CAACO,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;QACjC;MAAE;QAAA;QAAA;QAAA;MAAA,QACA,eAEF;QAAO,IAAI,EAAC,MAAM;QAAC,WAAW,EAAC,SAAS;QAAC,QAAQ,EAAGF,KAAK,IAAK;UAC5DL,OAAO,CAACK,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;QAC7B;MAAE;QAAA;QAAA;QAAA;MAAA,QAAE,eACJ;QAAQ,OAAO,EAAEJ,QAAS;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAqB;IAAA;MAAA;MAAA;MAAA;IAAA,QAC3C,gBAEJ,QAAC,IAAI;MAAC,MAAM,EAAER,MAAO;MAAC,QAAQ,EAAEE,QAAS;MAAC,IAAI,EAAEE;IAAK;MAAA;MAAA;MAAA;IAAA;EACvD;IAAA;IAAA;IAAA;EAAA,QAEE;AAGV;AAAC,GAtCQH,GAAG;AAAA,KAAHA,GAAG;AAwCZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
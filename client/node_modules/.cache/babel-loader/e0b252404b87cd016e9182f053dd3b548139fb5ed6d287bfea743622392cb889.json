{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\G15-5515\\\\OneDrive\\\\Pictures\\\\Socket-io\\\\client\\\\src\\\\Chat.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import ScrollToBottom from 'react-scroll-to-bottom'\n// import './App.css';\n// const Chat = ({ socket, username, room }) => {\n//     const [currentMessage, setCurrentMessage] = useState('');\n//     const [messageList, setmessageList] = useState([]);\n//     const sendMessage = async () => {\n//         if (currentMessage) {\n//             const messageData = {\n//                 //this message data contain what all infos we need to display with the message sent \n//                 room: room,\n//                 author: username,\n//                 message: currentMessage,\n//                 time: new Date(Date.now()).getHours() + \":\" + new Date(Date.now()).getMinutes(),\n\n//             };\n//             await socket.emit(\"send_message\", messageData)\n//             setmessageList((list) => [...list, messageData]);\n//             setCurrentMessage(\"\");\n//         }\n//     };\n//    \n//     useEffect(() => {\n//         socket.on(\"receive_message\", (data) => {\n//             // console.log(data);\n//             setmessageList((list) => [...list, data])\n//         });\n\n//     }, [socket]);\n//     return (\n//         <div className=\"chat-window\">\n//             <div>\n//                 <div className=\"chat-header\">\n//                     <p>Live Chat</p>\n//                 </div>\n//                 <div className=\"chat-body\">\n//                     <ScrollToBottom>\n//                     {messageList.map((messageContent) => {\n//                     return (\n//                         <div className=\"message\" id={username=== messageContent.author?\"other\":\"you\"}>\n//                             <div>\n//                                 <p>{messageContent.message}</p>\n//                             </div>\n//                             <div>\n//                                 <p id=\"time\">{messageContent.time}</p>\n//                                 <p id=\"author\">{messageContent.author}</p>\n//                             </div>\n//                         </div>\n//                     );\n\n//                     })}\n//                     </ScrollToBottom>\n\n//                 </div>\n//                 <div className=\"chat-footer\">\n//                     <input type=\"text\" value={currentMessage}placeholder=\"Hey...\" onChange={(event) => {\n//                         setCurrentMessage(event.target.value);\n//                     }} \n//                     onKeyPress={(event)=>{event.key===\"Enter\"&& sendMessage();}}/>\n//                     <button onClick={sendMessage}>&#9658;</button>\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default Chat;\nimport React, { useEffect, useState } from \"react\";\nimport ScrollToBottom from \"react-scroll-to-bottom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chat(_ref) {\n  _s();\n  let {\n    socket,\n    username,\n    room\n  } = _ref;\n  const [currentMessage, setCurrentMessage] = useState(\"\");\n  const [messageList, setMessageList] = useState([]);\n  const sendMessage = async () => {\n    if (currentMessage !== \"\") {\n      const messageData = {\n        room: room,\n        author: username,\n        message: currentMessage,\n        time: new Date(Date.now()).getHours() + \":\" + new Date(Date.now()).getMinutes()\n      };\n      await socket.emit(\"send_message\", messageData);\n      setMessageList(list => [...list, messageData]);\n      setCurrentMessage(\"\");\n    }\n  };\n  //listen every time there is a change in socket \n  useEffect(() => {\n    socket.on(\"receive_message\", data => {\n      setMessageList(list => [...list, data]);\n      alert(\"New notification\");\n    });\n  }, [socket]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-window\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Live Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-body\",\n      children: /*#__PURE__*/_jsxDEV(ScrollToBottom, {\n        className: \"message-container\",\n        children: messageList.map(messageContent => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message\",\n            id: username === messageContent.author ? \"other\" : \"you\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"message-content\",\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: messageContent.message\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 115,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"message-meta\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  id: \"time\",\n                  children: messageContent.time\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 119,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  id: \"author\",\n                  children: messageContent.author\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 120,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-footer\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: currentMessage,\n        placeholder: \"Hey...\",\n        onChange: event => {\n          setCurrentMessage(event.target.value);\n        },\n        onKeyPress: event => {\n          event.key === \"Enter\" && sendMessage();\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"\\u25BA\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 9\n  }, this);\n}\n_s(Chat, \"gDKz+24cg75HOdfXSFFmVy0ndt0=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useEffect","useState","ScrollToBottom","Chat","socket","username","room","currentMessage","setCurrentMessage","messageList","setMessageList","sendMessage","messageData","author","message","time","Date","now","getHours","getMinutes","emit","list","on","data","alert","map","messageContent","event","target","value","key"],"sources":["C:/Users/G15-5515/OneDrive/Pictures/Socket-io/client/src/Chat.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import ScrollToBottom from 'react-scroll-to-bottom'\r\n// import './App.css';\r\n// const Chat = ({ socket, username, room }) => {\r\n//     const [currentMessage, setCurrentMessage] = useState('');\r\n//     const [messageList, setmessageList] = useState([]);\r\n//     const sendMessage = async () => {\r\n//         if (currentMessage) {\r\n//             const messageData = {\r\n//                 //this message data contain what all infos we need to display with the message sent \r\n//                 room: room,\r\n//                 author: username,\r\n//                 message: currentMessage,\r\n//                 time: new Date(Date.now()).getHours() + \":\" + new Date(Date.now()).getMinutes(),\r\n\r\n//             };\r\n//             await socket.emit(\"send_message\", messageData)\r\n//             setmessageList((list) => [...list, messageData]);\r\n//             setCurrentMessage(\"\");\r\n//         }\r\n//     };\r\n//    \r\n//     useEffect(() => {\r\n//         socket.on(\"receive_message\", (data) => {\r\n//             // console.log(data);\r\n//             setmessageList((list) => [...list, data])\r\n//         });\r\n\r\n//     }, [socket]);\r\n//     return (\r\n//         <div className=\"chat-window\">\r\n//             <div>\r\n//                 <div className=\"chat-header\">\r\n//                     <p>Live Chat</p>\r\n//                 </div>\r\n//                 <div className=\"chat-body\">\r\n//                     <ScrollToBottom>\r\n//                     {messageList.map((messageContent) => {\r\n//                     return (\r\n//                         <div className=\"message\" id={username=== messageContent.author?\"other\":\"you\"}>\r\n//                             <div>\r\n//                                 <p>{messageContent.message}</p>\r\n//                             </div>\r\n//                             <div>\r\n//                                 <p id=\"time\">{messageContent.time}</p>\r\n//                                 <p id=\"author\">{messageContent.author}</p>\r\n//                             </div>\r\n//                         </div>\r\n//                     );\r\n\r\n//                     })}\r\n//                     </ScrollToBottom>\r\n\r\n//                 </div>\r\n//                 <div className=\"chat-footer\">\r\n//                     <input type=\"text\" value={currentMessage}placeholder=\"Hey...\" onChange={(event) => {\r\n//                         setCurrentMessage(event.target.value);\r\n//                     }} \r\n//                     onKeyPress={(event)=>{event.key===\"Enter\"&& sendMessage();}}/>\r\n//                     <button onClick={sendMessage}>&#9658;</button>\r\n//                 </div>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default Chat;\r\nimport React, { useEffect, useState } from \"react\";\r\nimport ScrollToBottom from \"react-scroll-to-bottom\";\r\n\r\nfunction Chat({ socket, username, room }) {\r\n    const [currentMessage, setCurrentMessage] = useState(\"\");\r\n    const [messageList, setMessageList] = useState([]);\r\n\r\n    const sendMessage = async () => {\r\n        if (currentMessage !== \"\") {\r\n            const messageData = {\r\n                room: room,\r\n                author: username,\r\n                message: currentMessage,\r\n                time:\r\n                    new Date(Date.now()).getHours() +\r\n                    \":\" +\r\n                    new Date(Date.now()).getMinutes(),\r\n            };\r\n\r\n            await socket.emit(\"send_message\", messageData);\r\n            setMessageList((list) => [...list, messageData]);\r\n            setCurrentMessage(\"\");\r\n        }\r\n    };\r\n //listen every time there is a change in socket \r\n    useEffect(() => {\r\n        socket.on(\"receive_message\", (data) => {\r\n            setMessageList((list) => [...list, data]);\r\n            alert(\"New notification\")\r\n        });\r\n    }, [socket]);\r\n\r\n    return (\r\n        <div className=\"chat-window\">\r\n            <div className=\"chat-header\">\r\n                <p>Live Chat</p>\r\n            </div>\r\n            <div className=\"chat-body\">\r\n                <ScrollToBottom className=\"message-container\">\r\n                    {messageList.map((messageContent) => {\r\n                        return (\r\n                            <div\r\n                                className=\"message\"\r\n                                id={username === messageContent.author ? \"other\" : \"you\"}\r\n                            >\r\n                                <div>\r\n                                    <div className=\"message-content\">\r\n                                        <p>{messageContent.message\r\n                                        }</p>\r\n                                    </div>\r\n                                    <div className=\"message-meta\">\r\n                                        <p id=\"time\">{messageContent.time}</p>\r\n                                        <p id=\"author\">{messageContent.author}</p>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </ScrollToBottom>\r\n            </div>\r\n            <div className=\"chat-footer\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={currentMessage}\r\n                    placeholder=\"Hey...\"\r\n                    onChange={(event) => {\r\n                        setCurrentMessage(event.target.value);\r\n                    }}\r\n                    onKeyPress={(event) => {\r\n                        event.key === \"Enter\" && sendMessage();\r\n                    }}\r\n                />\r\n                <button onClick={sendMessage}>&#9658;</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chat;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}